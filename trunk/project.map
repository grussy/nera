Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm32.o (exit)
/usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_copy_data.o)
                              main.o (__do_copy_data)
/usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_clear_bss.o)
                              main.o (__do_clear_bss)
/usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(strcmp.o)
                              commands.o (strcmp)

Allocating common symbols
Common symbol       size              file

int1                0x2               main.o
overflows           0x4               main.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00020000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
fuse             0x00820000         0x00000400         rw !x
lock             0x00830000         0x00000400         rw !x
signature        0x00840000         0x00000400         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm32.o
LOAD main.o
LOAD uart.o
LOAD commands.o
LOAD lcd.o
LOAD /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a
LOAD /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x00000000      0x4e0
 *(.vectors)
 .vectors       0x00000000       0x54 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm32.o
                0x00000000                __vectors
                0x00000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x00000054                . = ALIGN (0x2)
                0x00000054                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00000054        0x0 linker stubs
 *(.trampolines*)
                0x00000054                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x00000054                __ctors_start = .
 *(.ctors)
                0x00000054                __ctors_end = .
                0x00000054                __dtors_start = .
 *(.dtors)
                0x00000054                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x00000054        0x0 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm32.o
                0x00000054                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00000054        0xc /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm32.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x00000060       0x16 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_copy_data.o)
                0x00000060                __do_copy_data
 .init4         0x00000076       0x10 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_clear_bss.o)
                0x00000076                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000086        0x8 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm32.o
 *(.init9)
 *(.text)
 .text          0x0000008e        0x4 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm32.o
                0x0000008e                __vector_1
                0x0000008e                __vector_12
                0x0000008e                __bad_interrupt
                0x0000008e                __vector_6
                0x0000008e                __vector_3
                0x0000008e                __vector_11
                0x0000008e                __vector_13
                0x0000008e                __vector_17
                0x0000008e                __vector_19
                0x0000008e                __vector_7
                0x0000008e                __vector_5
                0x0000008e                __vector_4
                0x0000008e                __vector_2
                0x0000008e                __vector_15
                0x0000008e                __vector_8
                0x0000008e                __vector_14
                0x0000008e                __vector_10
                0x0000008e                __vector_16
                0x0000008e                __vector_18
                0x0000008e                __vector_20
 .text          0x00000092       0xb2 main.o
                0x00000092                init_Interrupts
                0x000000e8                start_Timer
                0x000000fc                main
                0x0000009e                __vector_9
 .text          0x00000144      0x100 uart.o
                0x000001f6                uart_gets
                0x000001da                uart_puts
                0x00000144                USART_Init
                0x000001ee                uart_getc
                0x000001ce                uart_putc
 .text          0x00000244      0x112 commands.o
                0x00000244                identify_command
 .text          0x00000356      0x174 lcd.o
                0x00000356                lcd_data
                0x000003de                lcd_clear
                0x00000484                set_cursor
                0x00000474                lcd_home
                0x000004b0                lcd_string
                0x000003d2                lcd_enable
                0x000003ee                lcd_init
                0x00000394                lcd_command
 .text          0x000004ca        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_exit.o)
 .text          0x000004ca        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_copy_data.o)
 .text          0x000004ca        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_clear_bss.o)
 .text          0x000004ca       0x12 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(strcmp.o)
                0x000004ca                strcmp
                0x000004dc                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x000004dc        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x000004dc        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x000004dc        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_clear_bss.o)
                0x000004dc                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x000004dc        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_exit.o)
                0x000004dc                exit
                0x000004dc                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x000004dc        0x4 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x000004e0                _etext = .

.data           0x00800060      0x1e4 load address 0x000004e0
                0x00800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800060        0x0 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm32.o
 .data          0x00800060        0xd main.o
 .data          0x0080006d       0xee uart.o
 .data          0x0080015b       0xe8 commands.o
 .data          0x00800243        0x0 lcd.o
 .data          0x00800243        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_exit.o)
 .data          0x00800243        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_copy_data.o)
 .data          0x00800243        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_clear_bss.o)
 .data          0x00800243        0x0 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(strcmp.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x00800244                . = ALIGN (0x2)
 *fill*         0x00800243        0x1 00
                0x00800244                _edata = .
                0x00800244                PROVIDE (__data_end, .)

.bss            0x00800244        0xe load address 0x000006c4
                0x00800244                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x00800244        0x0 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm32.o
 .bss           0x00800244        0x8 main.o
                0x00800248                saved_overflows
                0x00800246                saved_timer
                0x00800244                int2
 .bss           0x0080024c        0x0 uart.o
 .bss           0x0080024c        0x0 commands.o
 .bss           0x0080024c        0x0 lcd.o
 .bss           0x0080024c        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_exit.o)
 .bss           0x0080024c        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_copy_data.o)
 .bss           0x0080024c        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_clear_bss.o)
 .bss           0x0080024c        0x0 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(strcmp.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x0080024c        0x6 main.o
                0x0080024c                int1
                0x0080024e                overflows
                0x00800252                PROVIDE (__bss_end, .)
                0x000004e0                __data_load_start = LOADADDR (.data)
                0x000006c4                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x00800252        0x0
                0x00800252                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x00800252                PROVIDE (__noinit_end, .)
                0x00800252                _end = .
                0x00800252                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0x0
 *(.eeprom*)
                0x00810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x00000000      0x738
 *(.stab)
 .stab          0x00000000      0x6b4 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm32.o
 .stab          0x000006b4       0x84 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(strcmp.o)
                                 0x90 (size before relaxing)

.stabstr        0x00000000       0x82
 *(.stabstr)
 .stabstr       0x00000000       0x82 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm32.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(project.out elf32-avr)
LOAD linker stubs
